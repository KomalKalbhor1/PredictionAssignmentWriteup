library(caret)
install.packages("caret")
library(caret)
install.packages("dplyr")
library(caret)
install.packages("knitr")
library(kernlab)
install.packages("kernlab")
install.packages("kernlab", type="source")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("kernlab")
library(kernlab)
library(caret)
install.packages("dplyr")
library(dplyr)
install.packages("intersect")
install.packages("setdiff")
install.packages("union")
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
inTrain
set.seed(32323)
folds <- createFolds(y=spam$type, k=10,list=TRUE,returnTrain = TRUE)
sapply(folds,length)
fold[[1]][1:10]
folds[[1]][1:10]
modelFit <- train(type ~., data=training, method="glm")
install.packages("e1071")
library(e1071)
modelFit <- train(type ~., data=training, method="glm")
modelFit
args(train.default)
args(trainControl)
modelFit
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
library(caret)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
?diagnosis
str(diagnosis)
?createDataPartition
?predictors
predictors
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
suppressMessages(library(dplyr))
suppressMessages(library(Hmisc))
suppressMessages(library(gridExtra))
training <- mutate(training, index=1:nrow(training))
cutIndex <- cut2(training$index, g=10)
breaks <- 10
library(ggplot2)
suppressMessages(library(dplyr))
suppressMessages(library(Hmisc))
suppressMessages(library(gridExtra))
training <- mutate(training, index=1:nrow(training))
cutIndex <- cut2(training$index, g=10)
breaks <- 10
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
install.packages("Hmisc")
library(Hmisc)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer, breaks=20)
predictors
str(predictors)
AppliedPredictiveModeling
AlzheimerDisease
AlzheimerDisease
diagnosis
predictors
inTrain <- createDataPartition(diagnosis, p=0.7, list = FALSE)
inTrain
featurePlot(inTrain)
featurePlot(inTrain, training$CompressiveStrength, plot="lm")
featurePlot(inTrain, training$CompressiveStrength, plot="pairs")
featurePlot(training, training$CompressiveStrength, plot="pairs")
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(caret)
library(ElemStatLearn)
data(ozone, package = "ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ll <- matrix(NA, nrow=10, ncol = 155)
setwd("~/")
library(caret)
library(ElemStatLearn)
modFit <- train(Species ~ ., data=training, method="rf", prox=TRUE)
library(datasets)
training
library(kernlab)
training
data(spam)
library(caret);
library(kernlab);
inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE);
training <- spam[inTrain,]
testing <- spam[~inTrain,]
library(caret);
library(kernlab);
inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE);
training <- spam[inTrain,]
testing <- spam[-inTrain,]
cler
clear
cls
?datasets
install.packages("adaboost")
library(ggplot2)
qplot(training)
qplot(spam)
plot(spam)
install.packages("gbm")
library(gbm)
install.packages("mboost")
install.packages("ada")
install.packages("gamboost")
install.packages("ISLR")
library(ISLR)
data(Wage)
library(ggplot2)
library(car)
library(caret)
Wage <- subset(Wage, select = c(logwage))
inTrain <- createDataPartition(y = Wage$logwage, p = 0.7, list = FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
modFit <- train(Wage ~ . , method="gbm", data=training, verbose = FALSE)
modFit <- train(Wage ~ . , method="gbm", data=training, verbose = FALSE)
modFit <- train(Wage ~ ., method="gbm", data=training, verbose = FALSE)
library(gbm)
modFit <- train(Wage ~ ., method="gbm", data=training, verbose = FALSE)
modFit <- train(wage ~ ., method="gbm", data=training, verbose = FALSE)
library(ISLR)
library(caret)
library(ggplot2)
wage <- subset(Wage, select = c(logwage))
inTrain <- createDataPartition(y = Wage$logwage, p = 0.7, list = FALSE)
modFit <- train(wage ~ ., methods = "gbm", data = training, verbose = FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,];
modFit <- train(wage ~ ., methods = "gbm", data = training, verbose = FALSE)
modFit <- train(wage ~ ., method = "gbm", data = training, verbose = FALSE)
data(Wage)
Wage <- subset(Wage, select = c(lowage))
Wage <- subset(Wage, select = c(logwage))
inTrain <- createDataPartition(y = Wage$wage, p = 0.7, list = FALSE)
Wage <- subset(Wage, select = -c(logwage))
inTrain <- createDataPartition(y = Wage$wage, p = 0.7, list = FALSE)
inTrain <- createDataPartition(y=Wage$W, p = 0.7, list = FALSE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.6,
list = FALSE) # 60% training
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Class ~ ., method = "rpart", data = training)
modFit$finalModel
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("olive")
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
modolive <- train(Area ~ ., method = "rpart", data = olive)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1], size = dim(SAheart)[1] / 2, replace = F)
trainSA = SAheart[train, ]
testSA = SAheart[-train, ]
missClass = function(values, prediction){sum(((prediction > 0.5) * 1) != values) / length(values)}
set.seed(13234)
modelSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass(testSA$chd, predict(modelSA, newdata = testSA))
missClass(trainSA$chd, predict(modelSA, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(randomForest)
modvowel <- randomForest(y ~ ., data = vowel.train)
order(varImp(modvowel), decreasing = T)
install.packages("AppliedPredictiveModeling")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
install.packages("gbm")
install.packages("lubridate")
install.packages("forecast")
install.packages("e1071")
library(ElemStatLearn)
library(caret)
data("vowel.train")
data("vowel.test")
vowelvowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
mod_gbm <- train(y ~ ., data = vowel.train, method = "gbm")
pred_rf <- predict(mod_rf, vowel.test)
pred_gbm <- predict(mod_gbm, vowel.test)
confusionMatrix(pred_rf, vowel.test$y)$overall[1]
confusionMatrix(pred_gbm, vowel.test$y)$overall[1]
predDF <- data.frame(pred_rf, pred_gbm, y = vowel.test$y)
sum(pred_rf[predDF$pred_rf == predDF$pred_gbm] ==
predDF$y[predDF$pred_rf == predDF$pred_gbm]) /
sum(predDF$pred_rf == predDF$pred_gbm)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mod_rf <- train(diagnosis ~ ., data = training, method = "rf")
mod_gbm <- train(diagnosis ~ ., data = training, method = "gbm")
mod_lda <- train(diagnosis ~ ., data = training, method = "lda")
pred_rf <- predict(mod_rf, testing)
pred_gbm <- predict(mod_gbm, testing)
pred_lda <- predict(mod_lda, testing)
predDF <- data.frame(pred_rf, pred_gbm, pred_lda, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(pred_rf, testing$diagnosis)$overall[1]
confusionMatrix(pred_gbm, testing$diagnosis)$overall[1]
confusionMatrix(pred_lda, testing$diagnosis)$overall[1]
confusionMatrix(combPred, testing$diagnosis)$overall[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
dat = read.csv("~/Downloads/gaData.csv")
head(dat)
training = dat[year(dat$date) < 2012,]
training = dat[year(dat$date) < 2012,]
install.packages("lubridate")
library(lubridate)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
mod_ts <- bats(tstrain)
fcast <- forecast(mod_ts, level = 95, h = dim(testing)[1])
sum(fcast$lower < testing$visitsTumblr & testing$visitsTumblr < fcast$upper) /
dim(testing)[1]
mod_ts <- bats(tstrain)
library(forecast)
mod_ts <- bats(tstrain)
fcast <- forecast(mod_ts, level = 95, h = dim(testing)[1])
sum(fcast$lower < testing$visitsTumblr & testing$visitsTumblr < fcast$upper) /
dim(testing)[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
install.packages("e1071")
library(e1071)
mod_svm <- svm(CompressiveStrength ~ ., data = training)
?set.seed
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
set.seed(62433)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
mod_rf <- train(diagnosis ~ ., data = training, method = "rf")
mod_gbm <- train(diagnosis ~ ., data = training, method = "gbm")
mod_lda <- train(diagnosis ~ ., data = training, method = "lda")
pred_rf <- predict(mod_rf, testing)
pred_gbm <- predict(mod_gbm, testing)
pred_lda <- predict(mod_lda, testing)
predDF <- data.frame(pred_rf, pred_gbm, pred_lda, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(combPred, testing$diagnosis)$overall[1]
confusionMatrix(pred_rf, testing$diagnosis)$overall[1]
confusionMatrix(pred_gbm, testing$diagnosis)$overall[1]
confusionMatrix(pred_lda, testing$diagnosis)$overall[1]
confusionMatrix(combPred, testing$diagnosis)$overall[1]
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "pml-training.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "pml-testing.csv")
pml.training <- read.csv("pml-training.csv")
pml.testing <- read.csv("pml-testing.csv")
head(pml.training)
head(pml.testing)
quit()
setwd("~/Projects/datascience/coursera/PredictionAssignmentWriteup")
?library
